// Matsuoka, K. (1985). Sustained oscillations generated by mutually inhibiting neurons with adaptation. Biological Cybernetics, 52: 345â€“353.
// Endo et al., Learning CPG-based Biped Locomotion with a Policy Gradient Method: Application to a Humanoid Robot, The International Journal of Robotics Research February 2008 vol. 27 no. 2 213-228

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string.h>

#include "Matsuoka.h"

///////////////////////////////////////////

int main(int argc, char* argv[])
{
  

  double z1;
  double z1_dot;
  double z2;
  double z2_dot;



  double z1_dat;
  double z1_dat_dot;
  double z2_dat;
  double z2_dat_dot;

  double q1;
  double q2;

  double Output_CPG;


  ofstream saveFile1;
  saveFile1.open("ReadSensors1.txt",ios::out);


  z1 = 0.0;
  z1_dot = 0.0;
  z2 = 0.0;
  z2_dot = 0.0;

  q1 = 0.0;
  q2 = 0.0;

  z1_dat = 0.0;
  z1_dat_dot = 0.0;
  z2_dat = 0.0;
  z2_dat_dot = 0.0;

  Output_CPG = 0.0;




  //double exppp = exp(-1/Tau_cpg);  // for hip neurons
  //double exppp2= exp(-1/Tau_dat_cpg);  // for hip neurons

  printf("initial\n");





  do{
    
    
    /*	float sine[91],pi=3.141592653;

    for(int i=0;i<=90;i++)  
	sine[i] = sin(pi/180 * i);

	for(int f = 100; t)
		for f=100:10:1000
	 x = a * sin(2*pi/N*f*t);
     */



    double Tau_cpg = 0.224;
    double Tau_dat_cpg = 0.280;
    double w_12 = 2.0;
    double w_21 = 2.0;
    double Gamma = 2.5;
    double c = 2.36;
    double a1 = 0.0;
    double a2 = 0.0;
    double TAU = 0.001; //TAU = 0.1 = low resolution, TAU = 0.001 = High resolution

    //Neuron1

    z1_dot = (-z1-(w_12*q2)-(Gamma*z1_dat)+c+a1)/Tau_cpg;
    z1_dat_dot = (-z1_dat+q1)/Tau_dat_cpg;

    /*
	if(z1 < 0)
	q1 = 0;
	else
    q1 = z1;
     */
    q1 = (z1<0)? 0:z1;

    //////////////////////////////////////

    //Neuron2
    z2_dot = (-z2-(w_21*q1)-(Gamma*z2_dat)+c+a2)/Tau_cpg;
    z2_dat_dot = (-z2_dat+q2)/Tau_dat_cpg;

    /*if(z2 < 0)
	q2 = 0;
	else
    q2 = z2;*/

    q2 = (z2<0)? 0:z2;



    //Update state variable with Euler first order's method!

    z1 += TAU*z1_dot;
    z1_dat += TAU*z1_dat_dot;
    
    z2 += TAU*z2_dot;
    z2_dat += TAU*z2_dat_dot;



    //////////////////////////////////////

    Output_CPG = q1-q2;



    printf("CPG %f %f %f %f %f %f %f %f\n", Output_CPG, a1, q1, z2, q2, z1_dat, z2_dat, z2_dat_dot);

    saveFile1 <<Output_CPG<<" "<<q1<<" "<<q2<<" "<<z1<<" "<<z1_dat<<"  "<<z2<<" "<<z2_dat<< "   \n" << flush; //SAVE DATA

  }while(1==1);


  return 0;
}
